/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NonStandardERC20,
  NonStandardERC20Interface,
} from "../NonStandardERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161081438038061081483398101604081905261002f916101ce565b8251610042906001906020860190610073565b508151610056906002906020850190610073565b506000805460ff191660ff92909216919091179055506102869050565b82805461007f9061024b565b90600052602060002090601f0160209004810192826100a157600085556100e7565b82601f106100ba57805160ff19168380011785556100e7565b828001600101855582156100e7579182015b828111156100e75782518255916020019190600101906100cc565b506100f39291506100f7565b5090565b5b808211156100f357600081556001016100f8565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261013357600080fd5b81516001600160401b038082111561014d5761014d61010c565b604051601f8301601f19908116603f011681019082821181831017156101755761017561010c565b8160405283815260209250868385880101111561019157600080fd5b600091505b838210156101b35785820183015181830184015290820190610196565b838211156101c45760008385830101525b9695505050505050565b6000806000606084860312156101e357600080fd5b83516001600160401b03808211156101fa57600080fd5b61020687838801610122565b9450602086015191508082111561021c57600080fd5b5061022986828701610122565b925050604084015160ff8116811461024057600080fd5b809150509250925092565b600181811c9082168061025f57607f821691505b6020821081141561028057634e487b7160e01b600052602260045260246000fd5b50919050565b61057f806102956000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b411461015d578063a9059cbb14610165578063dd62ed3e1461017857600080fd5b8063313ce5671461011557806370a082311461013457600080fd5b806306fdde03146100a8578063095ea7b3146100c657806318160ddd146100e957806323b872dd14610100575b600080fd5b6100b06101b1565b6040516100bd91906103c6565b60405180910390f35b6100d96100d4366004610437565b61023f565b60405190151581526020016100bd565b6100f260035481565b6040519081526020016100bd565b61011361010e366004610461565b610255565b005b6000546101229060ff1681565b60405160ff90911681526020016100bd565b6100f261014236600461049d565b6001600160a01b031660009081526005602052604090205490565b6100b06102a0565b610113610173366004610437565b6102ad565b6100f26101863660046104bf565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b600180546101be906104f2565b80601f01602080910402602001604051908101604052809291908181526020018280546101ea906104f2565b80156102375780601f1061020c57610100808354040283529160200191610237565b820191906000526020600020905b81548152906001019060200180831161021a57829003601f168201915b505050505081565b600061024c3384846102bc565b50600192915050565b61026083838361031e565b6001600160a01b03831660009081526004602090815260408083203380855292529091205461029b918591610296908590610543565b6102bc565b505050565b600280546101be906104f2565b6102b833838361031e565b5050565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260056020526040902054610342908290610543565b6001600160a01b03808516600090815260056020526040808220939093559084168152205461037290829061055a565b6001600160a01b0380841660008181526005602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103119085815260200190565b600060208083528351808285015260005b818110156103f3578581018301518582016040015282016103d7565b81811115610405576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461043257600080fd5b919050565b6000806040838503121561044a57600080fd5b6104538361041b565b946020939093013593505050565b60008060006060848603121561047657600080fd5b61047f8461041b565b925061048d6020850161041b565b9150604084013590509250925092565b6000602082840312156104af57600080fd5b6104b88261041b565b9392505050565b600080604083850312156104d257600080fd5b6104db8361041b565b91506104e96020840161041b565b90509250929050565b600181811c9082168061050657607f821691505b6020821081141561052757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156105555761055561052d565b500390565b6000821982111561056d5761056d61052d565b50019056fea164736f6c634300080c000a";

type NonStandardERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NonStandardERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NonStandardERC20__factory extends ContractFactory {
  constructor(...args: NonStandardERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NonStandardERC20";
  }

  deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NonStandardERC20> {
    return super.deploy(name_, symbol_, decimals_, overrides || {}) as Promise<
      NonStandardERC20
    >;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    );
  }
  attach(address: string): NonStandardERC20 {
    return super.attach(address) as NonStandardERC20;
  }
  connect(signer: Signer): NonStandardERC20__factory {
    return super.connect(signer) as NonStandardERC20__factory;
  }
  static readonly contractName: "NonStandardERC20";
  public readonly contractName: "NonStandardERC20";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NonStandardERC20Interface {
    return new utils.Interface(_abi) as NonStandardERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonStandardERC20 {
    return new Contract(address, _abi, signerOrProvider) as NonStandardERC20;
  }
}
