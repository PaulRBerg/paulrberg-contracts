/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ERC20RecoverGodModeInterface extends utils.Interface {
  functions: {
    "__godMode_getIsRecoverInitialized()": FunctionFragment;
    "__godMode_setIsRecoverInitialized(bool)": FunctionFragment;
    "_recover(address,uint256)": FunctionFragment;
    "_renounceOwnership()": FunctionFragment;
    "_setNonRecoverableTokens(address[])": FunctionFragment;
    "_transferOwnership(address)": FunctionFragment;
    "nonRecoverableTokens(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__godMode_getIsRecoverInitialized"
      | "__godMode_setIsRecoverInitialized"
      | "_recover"
      | "_renounceOwnership"
      | "_setNonRecoverableTokens"
      | "_transferOwnership"
      | "nonRecoverableTokens"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__godMode_getIsRecoverInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__godMode_setIsRecoverInitialized",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "_recover",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setNonRecoverableTokens",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonRecoverableTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "__godMode_getIsRecoverInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__godMode_setIsRecoverInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNonRecoverableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonRecoverableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "Recover(address,address,uint256)": EventFragment;
    "SetNonRecoverableTokens(address,address[])": EventFragment;
    "TransferOwnership(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Recover"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNonRecoverableTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export interface RecoverEventObject {
  owner: string;
  token: string;
  recoverAmount: BigNumber;
}
export type RecoverEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverEventObject
>;

export type RecoverEventFilter = TypedEventFilter<RecoverEvent>;

export interface SetNonRecoverableTokensEventObject {
  owner: string;
  nonRecoverableTokens: string[];
}
export type SetNonRecoverableTokensEvent = TypedEvent<
  [string, string[]],
  SetNonRecoverableTokensEventObject
>;

export type SetNonRecoverableTokensEventFilter =
  TypedEventFilter<SetNonRecoverableTokensEvent>;

export interface TransferOwnershipEventObject {
  oldOwner: string;
  newOwner: string;
}
export type TransferOwnershipEvent = TypedEvent<
  [string, string],
  TransferOwnershipEventObject
>;

export type TransferOwnershipEventFilter =
  TypedEventFilter<TransferOwnershipEvent>;

export interface ERC20RecoverGodMode extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20RecoverGodModeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __godMode_getIsRecoverInitialized(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    __godMode_setIsRecoverInitialized(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _recover(
      token: PromiseOrValue<string>,
      recoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNonRecoverableTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonRecoverableTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  __godMode_getIsRecoverInitialized(
    overrides?: CallOverrides
  ): Promise<boolean>;

  __godMode_setIsRecoverInitialized(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _recover(
    token: PromiseOrValue<string>,
    recoverAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNonRecoverableTokens(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonRecoverableTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __godMode_getIsRecoverInitialized(
      overrides?: CallOverrides
    ): Promise<boolean>;

    __godMode_setIsRecoverInitialized(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    _recover(
      token: PromiseOrValue<string>,
      recoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _renounceOwnership(overrides?: CallOverrides): Promise<void>;

    _setNonRecoverableTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nonRecoverableTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Recover(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      token?: null,
      recoverAmount?: null
    ): RecoverEventFilter;
    Recover(
      owner?: PromiseOrValue<string> | null,
      token?: null,
      recoverAmount?: null
    ): RecoverEventFilter;

    "SetNonRecoverableTokens(address,address[])"(
      owner?: PromiseOrValue<string> | null,
      nonRecoverableTokens?: null
    ): SetNonRecoverableTokensEventFilter;
    SetNonRecoverableTokens(
      owner?: PromiseOrValue<string> | null,
      nonRecoverableTokens?: null
    ): SetNonRecoverableTokensEventFilter;

    "TransferOwnership(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): TransferOwnershipEventFilter;
    TransferOwnership(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): TransferOwnershipEventFilter;
  };

  estimateGas: {
    __godMode_getIsRecoverInitialized(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __godMode_setIsRecoverInitialized(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _recover(
      token: PromiseOrValue<string>,
      recoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNonRecoverableTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonRecoverableTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __godMode_getIsRecoverInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __godMode_setIsRecoverInitialized(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _recover(
      token: PromiseOrValue<string>,
      recoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNonRecoverableTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonRecoverableTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
